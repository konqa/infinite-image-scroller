{"version":3,"sources":["images/next.svg","images/previous.svg","data/watch.js","components/images.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data","watches","id","index","imageUrl","metal","Images","metalSpec","classes","_this$props$watch","this","props","watch","react_default","a","createElement","className","concat","src","alt","getMetalSignal","Component","App","state","appearHome","currentWatchIndex","currentWatch","nextWatch","previousWatch","toggleAppear","_this","setState","resetScroll","newWatch","length","prevWatch","_this$state","react_transition_group","in","appear","timeout","classNames","components_images","onClick","prevArrow","nextArrow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9916b484.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/next.66b1d21c.svg\";","module.exports = __webpack_public_path__ + \"static/media/previous.09a45199.svg\";","const data = {\r\n  \"watches\": [\r\n    {\r\n      \"id\": 10,\r\n      \"index\": 1,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/46991000/46991000-1-full.jpg\",\r\n      \"metal\": 398\r\n    },\r\n    {\r\n      \"id\": 11,\r\n      \"index\": 2,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/45060146/816137020749-1-full.jpg\",\r\n      \"metal\": 141\r\n    },\r\n    {\r\n      \"id\": 44,\r\n      \"index\": 3,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/45060139/816137020961-1-full.jpg\",\r\n      \"metal\": 642\r\n    },\r\n    {\r\n      \"id\": 1876,\r\n      \"index\": 4,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/45060149/816137020299-1-full.jpg\",\r\n      \"metal\": 256\r\n    },\r\n    {\r\n      \"id\": 1234438,\r\n      \"index\": 5,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/55018422/55018422-1-full.jpg\",\r\n      \"metal\": 700\r\n    },\r\n    {\r\n      \"id\": 474,\r\n      \"index\": 6,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/49755935/49755935-1-full.jpg\",\r\n      \"metal\": 45\r\n    },\r\n    {\r\n      \"id\": 16,\r\n      \"index\": 7,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/49785822/6002128510557-1-full.jpg\",\r\n      \"metal\": 2\r\n    },\r\n    {\r\n      \"id\": 14438,\r\n      \"index\": 8,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/44506357/44506357-1-full.jpg\",\r\n      \"metal\": 12\r\n    },\r\n    {\r\n      \"id\": 10,\r\n      \"index\": 9,\r\n      \"imageUrl\": \"https://media.takealot.com/covers_tsins/46991000/46991000-1-full.jpg\",\r\n      \"metal\": 398\r\n    }\r\n  ]\r\n}\r\n\r\nexport default data;","import React, { Component } from 'react';\r\n\r\nclass Images extends Component {\r\n    // style colour based on metal composition\r\n    getMetalSignal(metalSpec) {\r\n        let classes = \"badge m2 badge-\";\r\n        classes += metalSpec.metal > 200 ? \"warning\" : \"white\";\r\n        return classes;\r\n    }\r\n\r\n    render() {\r\n        const { id, imageUrl, metal } = this.props.watch;\r\n        return (\r\n            <div className=\"singleWatch\">\r\n                <div id={`watch-${id}`} className=\"img\">\r\n                    <img src={imageUrl} alt={id} />\r\n                </div>\r\n                <div className=\"details\">\r\n                    <p className={this.getMetalSignal({ metal })}>\r\n                        Radioactive Metals: {metal}mg\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Images;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport data from './data/watch';\r\nimport Images from './components/images';\r\nimport nextArrow from './images/next.svg';\r\nimport prevArrow from './images/previous.svg';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    appearHome: true,\r\n    currentWatchIndex: 0,\r\n    currentWatch: data.watches[0],\r\n    nextWatch: data.watches[1],\r\n    previousWatch: data.watches[2]\r\n  }\r\n\r\n  toggleAppear = () => {\r\n    this.setState({\r\n      appearHome: !this.state.appearHome\r\n    })\r\n  }\r\n\r\n  // end of image set let's start again\r\n  resetScroll = () => {\r\n    // console.log('lets start again');\r\n    this.setState({\r\n      currentWatchIndex: 0,\r\n      currentWatch: data.watches[0],\r\n      nextWatch: data.watches[1],\r\n      previousWatch: data.watches[2]\r\n    })\r\n  }\r\n\r\n  // process next watch\r\n  nextWatch = () => {\r\n    let newWatch = this.state.currentWatchIndex + 1;\r\n    // check if we've reached end of image set\r\n    (this.state.currentWatchIndex === data.watches.length - 2) ? this.resetScroll() : \r\n    this.setState({\r\n      currentWatchIndex: newWatch,\r\n      currentWatch: data.watches[newWatch],\r\n      nextWatch: data.watches[newWatch + 1],\r\n      previousWatch: data.watches[newWatch - 1]\r\n    })\r\n  }\r\n\r\n  // process previous watch\r\n  prevWatch = () => {\r\n    let newWatch = this.state.currentWatchIndex - 1;\r\n    this.state.currentWatchIndex < 2 ? this.resetScroll() :\r\n    this.setState({\r\n      currentWatchIndex: newWatch,\r\n      currentWatch: data.watches[newWatch],\r\n      nextWatch: data.watches[newWatch + 1],\r\n      previousWatch: data.watches[newWatch - 1]\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { appearHome, currentWatch, nextWatch, previousWatch } = this.state;\r\n\r\n    return ( <CSSTransition\r\n      in={appearHome}\r\n      appear={true}\r\n      timeout={1500}\r\n      classNames=\"fade\"\r\n    >\r\n      <div className=\"App\">\r\n\r\n\r\n          <div className=\"row\">\r\n            <div className=\"watchCloset col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n              <div className=\"imgPrev\">\r\n                <Images watch={previousWatch} />\r\n              </div>\r\n              <div className=\"imgCurr\">\r\n                <Images watch={currentWatch} />\r\n              </div>\r\n              <div className=\"imgNext\">\r\n                <Images watch={nextWatch} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        \r\n        <div className=\"row\">\r\n          <div className=\"scrollers col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n            <button onClick={this.prevWatch} >\r\n              <img src={prevArrow} alt=\"Previous\" className=\"Arrow\" />\r\n            </button>\r\n\r\n            <button onClick={this.nextWatch} >\r\n              <img src={nextArrow} alt=\"Next\" className=\"Arrow\" />\r\n            </button>\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      </CSSTransition>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}